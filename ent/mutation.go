// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/leorcvargas/bgeraser/ent/image"
	"github.com/leorcvargas/bgeraser/ent/imageprocess"
	"github.com/leorcvargas/bgeraser/ent/predicate"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeImage        = "Image"
	TypeImageProcess = "ImageProcess"
)

// ImageMutation represents an operation that mutates the Image nodes in the graph.
type ImageMutation struct {
	config
	op                     Op
	typ                    string
	id                     *uuid.UUID
	format                 *string
	size                   *int64
	addsize                *int64
	original_filename      *string
	created_at             *time.Time
	updated_at             *time.Time
	deleted_at             *time.Time
	clearedFields          map[string]struct{}
	images                 map[uuid.UUID]struct{}
	removedimages          map[uuid.UUID]struct{}
	clearedimages          bool
	image_processes        map[uuid.UUID]struct{}
	removedimage_processes map[uuid.UUID]struct{}
	clearedimage_processes bool
	done                   bool
	oldValue               func(context.Context) (*Image, error)
	predicates             []predicate.Image
}

var _ ent.Mutation = (*ImageMutation)(nil)

// imageOption allows management of the mutation configuration using functional options.
type imageOption func(*ImageMutation)

// newImageMutation creates new mutation for the Image entity.
func newImageMutation(c config, op Op, opts ...imageOption) *ImageMutation {
	m := &ImageMutation{
		config:        c,
		op:            op,
		typ:           TypeImage,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withImageID sets the ID field of the mutation.
func withImageID(id uuid.UUID) imageOption {
	return func(m *ImageMutation) {
		var (
			err   error
			once  sync.Once
			value *Image
		)
		m.oldValue = func(ctx context.Context) (*Image, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Image.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withImage sets the old Image of the mutation.
func withImage(node *Image) imageOption {
	return func(m *ImageMutation) {
		m.oldValue = func(context.Context) (*Image, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ImageMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ImageMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Image entities.
func (m *ImageMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ImageMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ImageMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Image.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetFormat sets the "format" field.
func (m *ImageMutation) SetFormat(s string) {
	m.format = &s
}

// Format returns the value of the "format" field in the mutation.
func (m *ImageMutation) Format() (r string, exists bool) {
	v := m.format
	if v == nil {
		return
	}
	return *v, true
}

// OldFormat returns the old "format" field's value of the Image entity.
// If the Image object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ImageMutation) OldFormat(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFormat is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFormat requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFormat: %w", err)
	}
	return oldValue.Format, nil
}

// ResetFormat resets all changes to the "format" field.
func (m *ImageMutation) ResetFormat() {
	m.format = nil
}

// SetSize sets the "size" field.
func (m *ImageMutation) SetSize(i int64) {
	m.size = &i
	m.addsize = nil
}

// Size returns the value of the "size" field in the mutation.
func (m *ImageMutation) Size() (r int64, exists bool) {
	v := m.size
	if v == nil {
		return
	}
	return *v, true
}

// OldSize returns the old "size" field's value of the Image entity.
// If the Image object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ImageMutation) OldSize(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSize is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSize requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSize: %w", err)
	}
	return oldValue.Size, nil
}

// AddSize adds i to the "size" field.
func (m *ImageMutation) AddSize(i int64) {
	if m.addsize != nil {
		*m.addsize += i
	} else {
		m.addsize = &i
	}
}

// AddedSize returns the value that was added to the "size" field in this mutation.
func (m *ImageMutation) AddedSize() (r int64, exists bool) {
	v := m.addsize
	if v == nil {
		return
	}
	return *v, true
}

// ResetSize resets all changes to the "size" field.
func (m *ImageMutation) ResetSize() {
	m.size = nil
	m.addsize = nil
}

// SetOriginalFilename sets the "original_filename" field.
func (m *ImageMutation) SetOriginalFilename(s string) {
	m.original_filename = &s
}

// OriginalFilename returns the value of the "original_filename" field in the mutation.
func (m *ImageMutation) OriginalFilename() (r string, exists bool) {
	v := m.original_filename
	if v == nil {
		return
	}
	return *v, true
}

// OldOriginalFilename returns the old "original_filename" field's value of the Image entity.
// If the Image object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ImageMutation) OldOriginalFilename(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOriginalFilename is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOriginalFilename requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOriginalFilename: %w", err)
	}
	return oldValue.OriginalFilename, nil
}

// ResetOriginalFilename resets all changes to the "original_filename" field.
func (m *ImageMutation) ResetOriginalFilename() {
	m.original_filename = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *ImageMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *ImageMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Image entity.
// If the Image object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ImageMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *ImageMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *ImageMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *ImageMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Image entity.
// If the Image object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ImageMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *ImageMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetDeletedAt sets the "deleted_at" field.
func (m *ImageMutation) SetDeletedAt(t time.Time) {
	m.deleted_at = &t
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *ImageMutation) DeletedAt() (r time.Time, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the Image entity.
// If the Image object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ImageMutation) OldDeletedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (m *ImageMutation) ClearDeletedAt() {
	m.deleted_at = nil
	m.clearedFields[image.FieldDeletedAt] = struct{}{}
}

// DeletedAtCleared returns if the "deleted_at" field was cleared in this mutation.
func (m *ImageMutation) DeletedAtCleared() bool {
	_, ok := m.clearedFields[image.FieldDeletedAt]
	return ok
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *ImageMutation) ResetDeletedAt() {
	m.deleted_at = nil
	delete(m.clearedFields, image.FieldDeletedAt)
}

// AddImageIDs adds the "images" edge to the Image entity by ids.
func (m *ImageMutation) AddImageIDs(ids ...uuid.UUID) {
	if m.images == nil {
		m.images = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.images[ids[i]] = struct{}{}
	}
}

// ClearImages clears the "images" edge to the Image entity.
func (m *ImageMutation) ClearImages() {
	m.clearedimages = true
}

// ImagesCleared reports if the "images" edge to the Image entity was cleared.
func (m *ImageMutation) ImagesCleared() bool {
	return m.clearedimages
}

// RemoveImageIDs removes the "images" edge to the Image entity by IDs.
func (m *ImageMutation) RemoveImageIDs(ids ...uuid.UUID) {
	if m.removedimages == nil {
		m.removedimages = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.images, ids[i])
		m.removedimages[ids[i]] = struct{}{}
	}
}

// RemovedImages returns the removed IDs of the "images" edge to the Image entity.
func (m *ImageMutation) RemovedImagesIDs() (ids []uuid.UUID) {
	for id := range m.removedimages {
		ids = append(ids, id)
	}
	return
}

// ImagesIDs returns the "images" edge IDs in the mutation.
func (m *ImageMutation) ImagesIDs() (ids []uuid.UUID) {
	for id := range m.images {
		ids = append(ids, id)
	}
	return
}

// ResetImages resets all changes to the "images" edge.
func (m *ImageMutation) ResetImages() {
	m.images = nil
	m.clearedimages = false
	m.removedimages = nil
}

// AddImageProcessIDs adds the "image_processes" edge to the ImageProcess entity by ids.
func (m *ImageMutation) AddImageProcessIDs(ids ...uuid.UUID) {
	if m.image_processes == nil {
		m.image_processes = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.image_processes[ids[i]] = struct{}{}
	}
}

// ClearImageProcesses clears the "image_processes" edge to the ImageProcess entity.
func (m *ImageMutation) ClearImageProcesses() {
	m.clearedimage_processes = true
}

// ImageProcessesCleared reports if the "image_processes" edge to the ImageProcess entity was cleared.
func (m *ImageMutation) ImageProcessesCleared() bool {
	return m.clearedimage_processes
}

// RemoveImageProcessIDs removes the "image_processes" edge to the ImageProcess entity by IDs.
func (m *ImageMutation) RemoveImageProcessIDs(ids ...uuid.UUID) {
	if m.removedimage_processes == nil {
		m.removedimage_processes = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.image_processes, ids[i])
		m.removedimage_processes[ids[i]] = struct{}{}
	}
}

// RemovedImageProcesses returns the removed IDs of the "image_processes" edge to the ImageProcess entity.
func (m *ImageMutation) RemovedImageProcessesIDs() (ids []uuid.UUID) {
	for id := range m.removedimage_processes {
		ids = append(ids, id)
	}
	return
}

// ImageProcessesIDs returns the "image_processes" edge IDs in the mutation.
func (m *ImageMutation) ImageProcessesIDs() (ids []uuid.UUID) {
	for id := range m.image_processes {
		ids = append(ids, id)
	}
	return
}

// ResetImageProcesses resets all changes to the "image_processes" edge.
func (m *ImageMutation) ResetImageProcesses() {
	m.image_processes = nil
	m.clearedimage_processes = false
	m.removedimage_processes = nil
}

// Where appends a list predicates to the ImageMutation builder.
func (m *ImageMutation) Where(ps ...predicate.Image) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ImageMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ImageMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Image, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ImageMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ImageMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Image).
func (m *ImageMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ImageMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.format != nil {
		fields = append(fields, image.FieldFormat)
	}
	if m.size != nil {
		fields = append(fields, image.FieldSize)
	}
	if m.original_filename != nil {
		fields = append(fields, image.FieldOriginalFilename)
	}
	if m.created_at != nil {
		fields = append(fields, image.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, image.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, image.FieldDeletedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ImageMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case image.FieldFormat:
		return m.Format()
	case image.FieldSize:
		return m.Size()
	case image.FieldOriginalFilename:
		return m.OriginalFilename()
	case image.FieldCreatedAt:
		return m.CreatedAt()
	case image.FieldUpdatedAt:
		return m.UpdatedAt()
	case image.FieldDeletedAt:
		return m.DeletedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ImageMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case image.FieldFormat:
		return m.OldFormat(ctx)
	case image.FieldSize:
		return m.OldSize(ctx)
	case image.FieldOriginalFilename:
		return m.OldOriginalFilename(ctx)
	case image.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case image.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case image.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Image field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ImageMutation) SetField(name string, value ent.Value) error {
	switch name {
	case image.FieldFormat:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFormat(v)
		return nil
	case image.FieldSize:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSize(v)
		return nil
	case image.FieldOriginalFilename:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOriginalFilename(v)
		return nil
	case image.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case image.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case image.FieldDeletedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Image field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ImageMutation) AddedFields() []string {
	var fields []string
	if m.addsize != nil {
		fields = append(fields, image.FieldSize)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ImageMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case image.FieldSize:
		return m.AddedSize()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ImageMutation) AddField(name string, value ent.Value) error {
	switch name {
	case image.FieldSize:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddSize(v)
		return nil
	}
	return fmt.Errorf("unknown Image numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ImageMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(image.FieldDeletedAt) {
		fields = append(fields, image.FieldDeletedAt)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ImageMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ImageMutation) ClearField(name string) error {
	switch name {
	case image.FieldDeletedAt:
		m.ClearDeletedAt()
		return nil
	}
	return fmt.Errorf("unknown Image nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ImageMutation) ResetField(name string) error {
	switch name {
	case image.FieldFormat:
		m.ResetFormat()
		return nil
	case image.FieldSize:
		m.ResetSize()
		return nil
	case image.FieldOriginalFilename:
		m.ResetOriginalFilename()
		return nil
	case image.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case image.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case image.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	}
	return fmt.Errorf("unknown Image field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ImageMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.images != nil {
		edges = append(edges, image.EdgeImages)
	}
	if m.image_processes != nil {
		edges = append(edges, image.EdgeImageProcesses)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ImageMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case image.EdgeImages:
		ids := make([]ent.Value, 0, len(m.images))
		for id := range m.images {
			ids = append(ids, id)
		}
		return ids
	case image.EdgeImageProcesses:
		ids := make([]ent.Value, 0, len(m.image_processes))
		for id := range m.image_processes {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ImageMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedimages != nil {
		edges = append(edges, image.EdgeImages)
	}
	if m.removedimage_processes != nil {
		edges = append(edges, image.EdgeImageProcesses)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ImageMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case image.EdgeImages:
		ids := make([]ent.Value, 0, len(m.removedimages))
		for id := range m.removedimages {
			ids = append(ids, id)
		}
		return ids
	case image.EdgeImageProcesses:
		ids := make([]ent.Value, 0, len(m.removedimage_processes))
		for id := range m.removedimage_processes {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ImageMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedimages {
		edges = append(edges, image.EdgeImages)
	}
	if m.clearedimage_processes {
		edges = append(edges, image.EdgeImageProcesses)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ImageMutation) EdgeCleared(name string) bool {
	switch name {
	case image.EdgeImages:
		return m.clearedimages
	case image.EdgeImageProcesses:
		return m.clearedimage_processes
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ImageMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Image unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ImageMutation) ResetEdge(name string) error {
	switch name {
	case image.EdgeImages:
		m.ResetImages()
		return nil
	case image.EdgeImageProcesses:
		m.ResetImageProcesses()
		return nil
	}
	return fmt.Errorf("unknown Image edge %s", name)
}

// ImageProcessMutation represents an operation that mutates the ImageProcess nodes in the graph.
type ImageProcessMutation struct {
	config
	op            Op
	typ           string
	id            *uuid.UUID
	kind          *string
	finished_at   *time.Time
	errored_at    *time.Time
	error_reason  *string
	clearedFields map[string]struct{}
	origin        *uuid.UUID
	clearedorigin bool
	result        *uuid.UUID
	clearedresult bool
	done          bool
	oldValue      func(context.Context) (*ImageProcess, error)
	predicates    []predicate.ImageProcess
}

var _ ent.Mutation = (*ImageProcessMutation)(nil)

// imageprocessOption allows management of the mutation configuration using functional options.
type imageprocessOption func(*ImageProcessMutation)

// newImageProcessMutation creates new mutation for the ImageProcess entity.
func newImageProcessMutation(c config, op Op, opts ...imageprocessOption) *ImageProcessMutation {
	m := &ImageProcessMutation{
		config:        c,
		op:            op,
		typ:           TypeImageProcess,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withImageProcessID sets the ID field of the mutation.
func withImageProcessID(id uuid.UUID) imageprocessOption {
	return func(m *ImageProcessMutation) {
		var (
			err   error
			once  sync.Once
			value *ImageProcess
		)
		m.oldValue = func(ctx context.Context) (*ImageProcess, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().ImageProcess.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withImageProcess sets the old ImageProcess of the mutation.
func withImageProcess(node *ImageProcess) imageprocessOption {
	return func(m *ImageProcessMutation) {
		m.oldValue = func(context.Context) (*ImageProcess, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ImageProcessMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ImageProcessMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of ImageProcess entities.
func (m *ImageProcessMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ImageProcessMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ImageProcessMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().ImageProcess.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetImageID sets the "image_id" field.
func (m *ImageProcessMutation) SetImageID(u uuid.UUID) {
	m.origin = &u
}

// ImageID returns the value of the "image_id" field in the mutation.
func (m *ImageProcessMutation) ImageID() (r uuid.UUID, exists bool) {
	v := m.origin
	if v == nil {
		return
	}
	return *v, true
}

// OldImageID returns the old "image_id" field's value of the ImageProcess entity.
// If the ImageProcess object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ImageProcessMutation) OldImageID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldImageID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldImageID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldImageID: %w", err)
	}
	return oldValue.ImageID, nil
}

// ResetImageID resets all changes to the "image_id" field.
func (m *ImageProcessMutation) ResetImageID() {
	m.origin = nil
}

// SetResultID sets the "result_id" field.
func (m *ImageProcessMutation) SetResultID(u uuid.UUID) {
	m.result = &u
}

// ResultID returns the value of the "result_id" field in the mutation.
func (m *ImageProcessMutation) ResultID() (r uuid.UUID, exists bool) {
	v := m.result
	if v == nil {
		return
	}
	return *v, true
}

// OldResultID returns the old "result_id" field's value of the ImageProcess entity.
// If the ImageProcess object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ImageProcessMutation) OldResultID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldResultID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldResultID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldResultID: %w", err)
	}
	return oldValue.ResultID, nil
}

// ClearResultID clears the value of the "result_id" field.
func (m *ImageProcessMutation) ClearResultID() {
	m.result = nil
	m.clearedFields[imageprocess.FieldResultID] = struct{}{}
}

// ResultIDCleared returns if the "result_id" field was cleared in this mutation.
func (m *ImageProcessMutation) ResultIDCleared() bool {
	_, ok := m.clearedFields[imageprocess.FieldResultID]
	return ok
}

// ResetResultID resets all changes to the "result_id" field.
func (m *ImageProcessMutation) ResetResultID() {
	m.result = nil
	delete(m.clearedFields, imageprocess.FieldResultID)
}

// SetKind sets the "kind" field.
func (m *ImageProcessMutation) SetKind(s string) {
	m.kind = &s
}

// Kind returns the value of the "kind" field in the mutation.
func (m *ImageProcessMutation) Kind() (r string, exists bool) {
	v := m.kind
	if v == nil {
		return
	}
	return *v, true
}

// OldKind returns the old "kind" field's value of the ImageProcess entity.
// If the ImageProcess object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ImageProcessMutation) OldKind(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldKind is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldKind requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldKind: %w", err)
	}
	return oldValue.Kind, nil
}

// ResetKind resets all changes to the "kind" field.
func (m *ImageProcessMutation) ResetKind() {
	m.kind = nil
}

// SetFinishedAt sets the "finished_at" field.
func (m *ImageProcessMutation) SetFinishedAt(t time.Time) {
	m.finished_at = &t
}

// FinishedAt returns the value of the "finished_at" field in the mutation.
func (m *ImageProcessMutation) FinishedAt() (r time.Time, exists bool) {
	v := m.finished_at
	if v == nil {
		return
	}
	return *v, true
}

// OldFinishedAt returns the old "finished_at" field's value of the ImageProcess entity.
// If the ImageProcess object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ImageProcessMutation) OldFinishedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFinishedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFinishedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFinishedAt: %w", err)
	}
	return oldValue.FinishedAt, nil
}

// ClearFinishedAt clears the value of the "finished_at" field.
func (m *ImageProcessMutation) ClearFinishedAt() {
	m.finished_at = nil
	m.clearedFields[imageprocess.FieldFinishedAt] = struct{}{}
}

// FinishedAtCleared returns if the "finished_at" field was cleared in this mutation.
func (m *ImageProcessMutation) FinishedAtCleared() bool {
	_, ok := m.clearedFields[imageprocess.FieldFinishedAt]
	return ok
}

// ResetFinishedAt resets all changes to the "finished_at" field.
func (m *ImageProcessMutation) ResetFinishedAt() {
	m.finished_at = nil
	delete(m.clearedFields, imageprocess.FieldFinishedAt)
}

// SetErroredAt sets the "errored_at" field.
func (m *ImageProcessMutation) SetErroredAt(t time.Time) {
	m.errored_at = &t
}

// ErroredAt returns the value of the "errored_at" field in the mutation.
func (m *ImageProcessMutation) ErroredAt() (r time.Time, exists bool) {
	v := m.errored_at
	if v == nil {
		return
	}
	return *v, true
}

// OldErroredAt returns the old "errored_at" field's value of the ImageProcess entity.
// If the ImageProcess object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ImageProcessMutation) OldErroredAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldErroredAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldErroredAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldErroredAt: %w", err)
	}
	return oldValue.ErroredAt, nil
}

// ClearErroredAt clears the value of the "errored_at" field.
func (m *ImageProcessMutation) ClearErroredAt() {
	m.errored_at = nil
	m.clearedFields[imageprocess.FieldErroredAt] = struct{}{}
}

// ErroredAtCleared returns if the "errored_at" field was cleared in this mutation.
func (m *ImageProcessMutation) ErroredAtCleared() bool {
	_, ok := m.clearedFields[imageprocess.FieldErroredAt]
	return ok
}

// ResetErroredAt resets all changes to the "errored_at" field.
func (m *ImageProcessMutation) ResetErroredAt() {
	m.errored_at = nil
	delete(m.clearedFields, imageprocess.FieldErroredAt)
}

// SetErrorReason sets the "error_reason" field.
func (m *ImageProcessMutation) SetErrorReason(s string) {
	m.error_reason = &s
}

// ErrorReason returns the value of the "error_reason" field in the mutation.
func (m *ImageProcessMutation) ErrorReason() (r string, exists bool) {
	v := m.error_reason
	if v == nil {
		return
	}
	return *v, true
}

// OldErrorReason returns the old "error_reason" field's value of the ImageProcess entity.
// If the ImageProcess object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ImageProcessMutation) OldErrorReason(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldErrorReason is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldErrorReason requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldErrorReason: %w", err)
	}
	return oldValue.ErrorReason, nil
}

// ClearErrorReason clears the value of the "error_reason" field.
func (m *ImageProcessMutation) ClearErrorReason() {
	m.error_reason = nil
	m.clearedFields[imageprocess.FieldErrorReason] = struct{}{}
}

// ErrorReasonCleared returns if the "error_reason" field was cleared in this mutation.
func (m *ImageProcessMutation) ErrorReasonCleared() bool {
	_, ok := m.clearedFields[imageprocess.FieldErrorReason]
	return ok
}

// ResetErrorReason resets all changes to the "error_reason" field.
func (m *ImageProcessMutation) ResetErrorReason() {
	m.error_reason = nil
	delete(m.clearedFields, imageprocess.FieldErrorReason)
}

// SetOriginID sets the "origin" edge to the Image entity by id.
func (m *ImageProcessMutation) SetOriginID(id uuid.UUID) {
	m.origin = &id
}

// ClearOrigin clears the "origin" edge to the Image entity.
func (m *ImageProcessMutation) ClearOrigin() {
	m.clearedorigin = true
}

// OriginCleared reports if the "origin" edge to the Image entity was cleared.
func (m *ImageProcessMutation) OriginCleared() bool {
	return m.clearedorigin
}

// OriginID returns the "origin" edge ID in the mutation.
func (m *ImageProcessMutation) OriginID() (id uuid.UUID, exists bool) {
	if m.origin != nil {
		return *m.origin, true
	}
	return
}

// OriginIDs returns the "origin" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// OriginID instead. It exists only for internal usage by the builders.
func (m *ImageProcessMutation) OriginIDs() (ids []uuid.UUID) {
	if id := m.origin; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetOrigin resets all changes to the "origin" edge.
func (m *ImageProcessMutation) ResetOrigin() {
	m.origin = nil
	m.clearedorigin = false
}

// ClearResult clears the "result" edge to the Image entity.
func (m *ImageProcessMutation) ClearResult() {
	m.clearedresult = true
}

// ResultCleared reports if the "result" edge to the Image entity was cleared.
func (m *ImageProcessMutation) ResultCleared() bool {
	return m.ResultIDCleared() || m.clearedresult
}

// ResultIDs returns the "result" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ResultID instead. It exists only for internal usage by the builders.
func (m *ImageProcessMutation) ResultIDs() (ids []uuid.UUID) {
	if id := m.result; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetResult resets all changes to the "result" edge.
func (m *ImageProcessMutation) ResetResult() {
	m.result = nil
	m.clearedresult = false
}

// Where appends a list predicates to the ImageProcessMutation builder.
func (m *ImageProcessMutation) Where(ps ...predicate.ImageProcess) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ImageProcessMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ImageProcessMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.ImageProcess, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ImageProcessMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ImageProcessMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (ImageProcess).
func (m *ImageProcessMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ImageProcessMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.origin != nil {
		fields = append(fields, imageprocess.FieldImageID)
	}
	if m.result != nil {
		fields = append(fields, imageprocess.FieldResultID)
	}
	if m.kind != nil {
		fields = append(fields, imageprocess.FieldKind)
	}
	if m.finished_at != nil {
		fields = append(fields, imageprocess.FieldFinishedAt)
	}
	if m.errored_at != nil {
		fields = append(fields, imageprocess.FieldErroredAt)
	}
	if m.error_reason != nil {
		fields = append(fields, imageprocess.FieldErrorReason)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ImageProcessMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case imageprocess.FieldImageID:
		return m.ImageID()
	case imageprocess.FieldResultID:
		return m.ResultID()
	case imageprocess.FieldKind:
		return m.Kind()
	case imageprocess.FieldFinishedAt:
		return m.FinishedAt()
	case imageprocess.FieldErroredAt:
		return m.ErroredAt()
	case imageprocess.FieldErrorReason:
		return m.ErrorReason()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ImageProcessMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case imageprocess.FieldImageID:
		return m.OldImageID(ctx)
	case imageprocess.FieldResultID:
		return m.OldResultID(ctx)
	case imageprocess.FieldKind:
		return m.OldKind(ctx)
	case imageprocess.FieldFinishedAt:
		return m.OldFinishedAt(ctx)
	case imageprocess.FieldErroredAt:
		return m.OldErroredAt(ctx)
	case imageprocess.FieldErrorReason:
		return m.OldErrorReason(ctx)
	}
	return nil, fmt.Errorf("unknown ImageProcess field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ImageProcessMutation) SetField(name string, value ent.Value) error {
	switch name {
	case imageprocess.FieldImageID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetImageID(v)
		return nil
	case imageprocess.FieldResultID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetResultID(v)
		return nil
	case imageprocess.FieldKind:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetKind(v)
		return nil
	case imageprocess.FieldFinishedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFinishedAt(v)
		return nil
	case imageprocess.FieldErroredAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetErroredAt(v)
		return nil
	case imageprocess.FieldErrorReason:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetErrorReason(v)
		return nil
	}
	return fmt.Errorf("unknown ImageProcess field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ImageProcessMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ImageProcessMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ImageProcessMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown ImageProcess numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ImageProcessMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(imageprocess.FieldResultID) {
		fields = append(fields, imageprocess.FieldResultID)
	}
	if m.FieldCleared(imageprocess.FieldFinishedAt) {
		fields = append(fields, imageprocess.FieldFinishedAt)
	}
	if m.FieldCleared(imageprocess.FieldErroredAt) {
		fields = append(fields, imageprocess.FieldErroredAt)
	}
	if m.FieldCleared(imageprocess.FieldErrorReason) {
		fields = append(fields, imageprocess.FieldErrorReason)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ImageProcessMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ImageProcessMutation) ClearField(name string) error {
	switch name {
	case imageprocess.FieldResultID:
		m.ClearResultID()
		return nil
	case imageprocess.FieldFinishedAt:
		m.ClearFinishedAt()
		return nil
	case imageprocess.FieldErroredAt:
		m.ClearErroredAt()
		return nil
	case imageprocess.FieldErrorReason:
		m.ClearErrorReason()
		return nil
	}
	return fmt.Errorf("unknown ImageProcess nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ImageProcessMutation) ResetField(name string) error {
	switch name {
	case imageprocess.FieldImageID:
		m.ResetImageID()
		return nil
	case imageprocess.FieldResultID:
		m.ResetResultID()
		return nil
	case imageprocess.FieldKind:
		m.ResetKind()
		return nil
	case imageprocess.FieldFinishedAt:
		m.ResetFinishedAt()
		return nil
	case imageprocess.FieldErroredAt:
		m.ResetErroredAt()
		return nil
	case imageprocess.FieldErrorReason:
		m.ResetErrorReason()
		return nil
	}
	return fmt.Errorf("unknown ImageProcess field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ImageProcessMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.origin != nil {
		edges = append(edges, imageprocess.EdgeOrigin)
	}
	if m.result != nil {
		edges = append(edges, imageprocess.EdgeResult)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ImageProcessMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case imageprocess.EdgeOrigin:
		if id := m.origin; id != nil {
			return []ent.Value{*id}
		}
	case imageprocess.EdgeResult:
		if id := m.result; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ImageProcessMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ImageProcessMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ImageProcessMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedorigin {
		edges = append(edges, imageprocess.EdgeOrigin)
	}
	if m.clearedresult {
		edges = append(edges, imageprocess.EdgeResult)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ImageProcessMutation) EdgeCleared(name string) bool {
	switch name {
	case imageprocess.EdgeOrigin:
		return m.clearedorigin
	case imageprocess.EdgeResult:
		return m.clearedresult
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ImageProcessMutation) ClearEdge(name string) error {
	switch name {
	case imageprocess.EdgeOrigin:
		m.ClearOrigin()
		return nil
	case imageprocess.EdgeResult:
		m.ClearResult()
		return nil
	}
	return fmt.Errorf("unknown ImageProcess unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ImageProcessMutation) ResetEdge(name string) error {
	switch name {
	case imageprocess.EdgeOrigin:
		m.ResetOrigin()
		return nil
	case imageprocess.EdgeResult:
		m.ResetResult()
		return nil
	}
	return fmt.Errorf("unknown ImageProcess edge %s", name)
}
