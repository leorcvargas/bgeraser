// Code generated by ent, DO NOT EDIT.

package imageprocess

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the imageprocess type in the database.
	Label = "image_process"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldImageID holds the string denoting the image_id field in the database.
	FieldImageID = "image_id"
	// FieldResultID holds the string denoting the result_id field in the database.
	FieldResultID = "result_id"
	// FieldKind holds the string denoting the kind field in the database.
	FieldKind = "kind"
	// FieldFinishedAt holds the string denoting the finished_at field in the database.
	FieldFinishedAt = "finished_at"
	// FieldErroredAt holds the string denoting the errored_at field in the database.
	FieldErroredAt = "errored_at"
	// FieldErrorReason holds the string denoting the error_reason field in the database.
	FieldErrorReason = "error_reason"
	// EdgeOrigin holds the string denoting the origin edge name in mutations.
	EdgeOrigin = "origin"
	// EdgeResult holds the string denoting the result edge name in mutations.
	EdgeResult = "result"
	// ImageFieldID holds the string denoting the ID field of the Image.
	ImageFieldID = "oid"
	// Table holds the table name of the imageprocess in the database.
	Table = "image_processes"
	// OriginTable is the table that holds the origin relation/edge.
	OriginTable = "image_processes"
	// OriginInverseTable is the table name for the Image entity.
	// It exists in this package in order to avoid circular dependency with the "image" package.
	OriginInverseTable = "images"
	// OriginColumn is the table column denoting the origin relation/edge.
	OriginColumn = "image_id"
	// ResultTable is the table that holds the result relation/edge.
	ResultTable = "image_processes"
	// ResultInverseTable is the table name for the Image entity.
	// It exists in this package in order to avoid circular dependency with the "image" package.
	ResultInverseTable = "images"
	// ResultColumn is the table column denoting the result relation/edge.
	ResultColumn = "result_id"
)

// Columns holds all SQL columns for imageprocess fields.
var Columns = []string{
	FieldID,
	FieldImageID,
	FieldResultID,
	FieldKind,
	FieldFinishedAt,
	FieldErroredAt,
	FieldErrorReason,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// KindValidator is a validator for the "kind" field. It is called by the builders before save.
	KindValidator func(string) error
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the ImageProcess queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByImageID orders the results by the image_id field.
func ByImageID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldImageID, opts...).ToFunc()
}

// ByResultID orders the results by the result_id field.
func ByResultID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldResultID, opts...).ToFunc()
}

// ByKind orders the results by the kind field.
func ByKind(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldKind, opts...).ToFunc()
}

// ByFinishedAt orders the results by the finished_at field.
func ByFinishedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFinishedAt, opts...).ToFunc()
}

// ByErroredAt orders the results by the errored_at field.
func ByErroredAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldErroredAt, opts...).ToFunc()
}

// ByErrorReason orders the results by the error_reason field.
func ByErrorReason(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldErrorReason, opts...).ToFunc()
}

// ByOriginField orders the results by origin field.
func ByOriginField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOriginStep(), sql.OrderByField(field, opts...))
	}
}

// ByResultField orders the results by result field.
func ByResultField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newResultStep(), sql.OrderByField(field, opts...))
	}
}
func newOriginStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OriginInverseTable, ImageFieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, OriginTable, OriginColumn),
	)
}
func newResultStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ResultInverseTable, ImageFieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, ResultTable, ResultColumn),
	)
}
