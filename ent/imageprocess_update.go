// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/leorcvargas/bgeraser/ent/image"
	"github.com/leorcvargas/bgeraser/ent/imageprocess"
	"github.com/leorcvargas/bgeraser/ent/predicate"
)

// ImageProcessUpdate is the builder for updating ImageProcess entities.
type ImageProcessUpdate struct {
	config
	hooks    []Hook
	mutation *ImageProcessMutation
}

// Where appends a list predicates to the ImageProcessUpdate builder.
func (ipu *ImageProcessUpdate) Where(ps ...predicate.ImageProcess) *ImageProcessUpdate {
	ipu.mutation.Where(ps...)
	return ipu
}

// SetImageID sets the "image_id" field.
func (ipu *ImageProcessUpdate) SetImageID(u uuid.UUID) *ImageProcessUpdate {
	ipu.mutation.SetImageID(u)
	return ipu
}

// SetResultID sets the "result_id" field.
func (ipu *ImageProcessUpdate) SetResultID(u uuid.UUID) *ImageProcessUpdate {
	ipu.mutation.SetResultID(u)
	return ipu
}

// SetNillableResultID sets the "result_id" field if the given value is not nil.
func (ipu *ImageProcessUpdate) SetNillableResultID(u *uuid.UUID) *ImageProcessUpdate {
	if u != nil {
		ipu.SetResultID(*u)
	}
	return ipu
}

// ClearResultID clears the value of the "result_id" field.
func (ipu *ImageProcessUpdate) ClearResultID() *ImageProcessUpdate {
	ipu.mutation.ClearResultID()
	return ipu
}

// SetFinishedAt sets the "finished_at" field.
func (ipu *ImageProcessUpdate) SetFinishedAt(t time.Time) *ImageProcessUpdate {
	ipu.mutation.SetFinishedAt(t)
	return ipu
}

// SetNillableFinishedAt sets the "finished_at" field if the given value is not nil.
func (ipu *ImageProcessUpdate) SetNillableFinishedAt(t *time.Time) *ImageProcessUpdate {
	if t != nil {
		ipu.SetFinishedAt(*t)
	}
	return ipu
}

// ClearFinishedAt clears the value of the "finished_at" field.
func (ipu *ImageProcessUpdate) ClearFinishedAt() *ImageProcessUpdate {
	ipu.mutation.ClearFinishedAt()
	return ipu
}

// SetErroredAt sets the "errored_at" field.
func (ipu *ImageProcessUpdate) SetErroredAt(t time.Time) *ImageProcessUpdate {
	ipu.mutation.SetErroredAt(t)
	return ipu
}

// SetNillableErroredAt sets the "errored_at" field if the given value is not nil.
func (ipu *ImageProcessUpdate) SetNillableErroredAt(t *time.Time) *ImageProcessUpdate {
	if t != nil {
		ipu.SetErroredAt(*t)
	}
	return ipu
}

// ClearErroredAt clears the value of the "errored_at" field.
func (ipu *ImageProcessUpdate) ClearErroredAt() *ImageProcessUpdate {
	ipu.mutation.ClearErroredAt()
	return ipu
}

// SetErrorReason sets the "error_reason" field.
func (ipu *ImageProcessUpdate) SetErrorReason(s string) *ImageProcessUpdate {
	ipu.mutation.SetErrorReason(s)
	return ipu
}

// SetNillableErrorReason sets the "error_reason" field if the given value is not nil.
func (ipu *ImageProcessUpdate) SetNillableErrorReason(s *string) *ImageProcessUpdate {
	if s != nil {
		ipu.SetErrorReason(*s)
	}
	return ipu
}

// ClearErrorReason clears the value of the "error_reason" field.
func (ipu *ImageProcessUpdate) ClearErrorReason() *ImageProcessUpdate {
	ipu.mutation.ClearErrorReason()
	return ipu
}

// SetOriginID sets the "origin" edge to the Image entity by ID.
func (ipu *ImageProcessUpdate) SetOriginID(id uuid.UUID) *ImageProcessUpdate {
	ipu.mutation.SetOriginID(id)
	return ipu
}

// SetOrigin sets the "origin" edge to the Image entity.
func (ipu *ImageProcessUpdate) SetOrigin(i *Image) *ImageProcessUpdate {
	return ipu.SetOriginID(i.ID)
}

// SetResult sets the "result" edge to the Image entity.
func (ipu *ImageProcessUpdate) SetResult(i *Image) *ImageProcessUpdate {
	return ipu.SetResultID(i.ID)
}

// Mutation returns the ImageProcessMutation object of the builder.
func (ipu *ImageProcessUpdate) Mutation() *ImageProcessMutation {
	return ipu.mutation
}

// ClearOrigin clears the "origin" edge to the Image entity.
func (ipu *ImageProcessUpdate) ClearOrigin() *ImageProcessUpdate {
	ipu.mutation.ClearOrigin()
	return ipu
}

// ClearResult clears the "result" edge to the Image entity.
func (ipu *ImageProcessUpdate) ClearResult() *ImageProcessUpdate {
	ipu.mutation.ClearResult()
	return ipu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ipu *ImageProcessUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ipu.sqlSave, ipu.mutation, ipu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ipu *ImageProcessUpdate) SaveX(ctx context.Context) int {
	affected, err := ipu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ipu *ImageProcessUpdate) Exec(ctx context.Context) error {
	_, err := ipu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ipu *ImageProcessUpdate) ExecX(ctx context.Context) {
	if err := ipu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ipu *ImageProcessUpdate) check() error {
	if _, ok := ipu.mutation.OriginID(); ipu.mutation.OriginCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ImageProcess.origin"`)
	}
	return nil
}

func (ipu *ImageProcessUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ipu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(imageprocess.Table, imageprocess.Columns, sqlgraph.NewFieldSpec(imageprocess.FieldID, field.TypeUUID))
	if ps := ipu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ipu.mutation.FinishedAt(); ok {
		_spec.SetField(imageprocess.FieldFinishedAt, field.TypeTime, value)
	}
	if ipu.mutation.FinishedAtCleared() {
		_spec.ClearField(imageprocess.FieldFinishedAt, field.TypeTime)
	}
	if value, ok := ipu.mutation.ErroredAt(); ok {
		_spec.SetField(imageprocess.FieldErroredAt, field.TypeTime, value)
	}
	if ipu.mutation.ErroredAtCleared() {
		_spec.ClearField(imageprocess.FieldErroredAt, field.TypeTime)
	}
	if value, ok := ipu.mutation.ErrorReason(); ok {
		_spec.SetField(imageprocess.FieldErrorReason, field.TypeString, value)
	}
	if ipu.mutation.ErrorReasonCleared() {
		_spec.ClearField(imageprocess.FieldErrorReason, field.TypeString)
	}
	if ipu.mutation.OriginCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   imageprocess.OriginTable,
			Columns: []string{imageprocess.OriginColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(image.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ipu.mutation.OriginIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   imageprocess.OriginTable,
			Columns: []string{imageprocess.OriginColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(image.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ipu.mutation.ResultCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   imageprocess.ResultTable,
			Columns: []string{imageprocess.ResultColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(image.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ipu.mutation.ResultIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   imageprocess.ResultTable,
			Columns: []string{imageprocess.ResultColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(image.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ipu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{imageprocess.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ipu.mutation.done = true
	return n, nil
}

// ImageProcessUpdateOne is the builder for updating a single ImageProcess entity.
type ImageProcessUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ImageProcessMutation
}

// SetImageID sets the "image_id" field.
func (ipuo *ImageProcessUpdateOne) SetImageID(u uuid.UUID) *ImageProcessUpdateOne {
	ipuo.mutation.SetImageID(u)
	return ipuo
}

// SetResultID sets the "result_id" field.
func (ipuo *ImageProcessUpdateOne) SetResultID(u uuid.UUID) *ImageProcessUpdateOne {
	ipuo.mutation.SetResultID(u)
	return ipuo
}

// SetNillableResultID sets the "result_id" field if the given value is not nil.
func (ipuo *ImageProcessUpdateOne) SetNillableResultID(u *uuid.UUID) *ImageProcessUpdateOne {
	if u != nil {
		ipuo.SetResultID(*u)
	}
	return ipuo
}

// ClearResultID clears the value of the "result_id" field.
func (ipuo *ImageProcessUpdateOne) ClearResultID() *ImageProcessUpdateOne {
	ipuo.mutation.ClearResultID()
	return ipuo
}

// SetFinishedAt sets the "finished_at" field.
func (ipuo *ImageProcessUpdateOne) SetFinishedAt(t time.Time) *ImageProcessUpdateOne {
	ipuo.mutation.SetFinishedAt(t)
	return ipuo
}

// SetNillableFinishedAt sets the "finished_at" field if the given value is not nil.
func (ipuo *ImageProcessUpdateOne) SetNillableFinishedAt(t *time.Time) *ImageProcessUpdateOne {
	if t != nil {
		ipuo.SetFinishedAt(*t)
	}
	return ipuo
}

// ClearFinishedAt clears the value of the "finished_at" field.
func (ipuo *ImageProcessUpdateOne) ClearFinishedAt() *ImageProcessUpdateOne {
	ipuo.mutation.ClearFinishedAt()
	return ipuo
}

// SetErroredAt sets the "errored_at" field.
func (ipuo *ImageProcessUpdateOne) SetErroredAt(t time.Time) *ImageProcessUpdateOne {
	ipuo.mutation.SetErroredAt(t)
	return ipuo
}

// SetNillableErroredAt sets the "errored_at" field if the given value is not nil.
func (ipuo *ImageProcessUpdateOne) SetNillableErroredAt(t *time.Time) *ImageProcessUpdateOne {
	if t != nil {
		ipuo.SetErroredAt(*t)
	}
	return ipuo
}

// ClearErroredAt clears the value of the "errored_at" field.
func (ipuo *ImageProcessUpdateOne) ClearErroredAt() *ImageProcessUpdateOne {
	ipuo.mutation.ClearErroredAt()
	return ipuo
}

// SetErrorReason sets the "error_reason" field.
func (ipuo *ImageProcessUpdateOne) SetErrorReason(s string) *ImageProcessUpdateOne {
	ipuo.mutation.SetErrorReason(s)
	return ipuo
}

// SetNillableErrorReason sets the "error_reason" field if the given value is not nil.
func (ipuo *ImageProcessUpdateOne) SetNillableErrorReason(s *string) *ImageProcessUpdateOne {
	if s != nil {
		ipuo.SetErrorReason(*s)
	}
	return ipuo
}

// ClearErrorReason clears the value of the "error_reason" field.
func (ipuo *ImageProcessUpdateOne) ClearErrorReason() *ImageProcessUpdateOne {
	ipuo.mutation.ClearErrorReason()
	return ipuo
}

// SetOriginID sets the "origin" edge to the Image entity by ID.
func (ipuo *ImageProcessUpdateOne) SetOriginID(id uuid.UUID) *ImageProcessUpdateOne {
	ipuo.mutation.SetOriginID(id)
	return ipuo
}

// SetOrigin sets the "origin" edge to the Image entity.
func (ipuo *ImageProcessUpdateOne) SetOrigin(i *Image) *ImageProcessUpdateOne {
	return ipuo.SetOriginID(i.ID)
}

// SetResult sets the "result" edge to the Image entity.
func (ipuo *ImageProcessUpdateOne) SetResult(i *Image) *ImageProcessUpdateOne {
	return ipuo.SetResultID(i.ID)
}

// Mutation returns the ImageProcessMutation object of the builder.
func (ipuo *ImageProcessUpdateOne) Mutation() *ImageProcessMutation {
	return ipuo.mutation
}

// ClearOrigin clears the "origin" edge to the Image entity.
func (ipuo *ImageProcessUpdateOne) ClearOrigin() *ImageProcessUpdateOne {
	ipuo.mutation.ClearOrigin()
	return ipuo
}

// ClearResult clears the "result" edge to the Image entity.
func (ipuo *ImageProcessUpdateOne) ClearResult() *ImageProcessUpdateOne {
	ipuo.mutation.ClearResult()
	return ipuo
}

// Where appends a list predicates to the ImageProcessUpdate builder.
func (ipuo *ImageProcessUpdateOne) Where(ps ...predicate.ImageProcess) *ImageProcessUpdateOne {
	ipuo.mutation.Where(ps...)
	return ipuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ipuo *ImageProcessUpdateOne) Select(field string, fields ...string) *ImageProcessUpdateOne {
	ipuo.fields = append([]string{field}, fields...)
	return ipuo
}

// Save executes the query and returns the updated ImageProcess entity.
func (ipuo *ImageProcessUpdateOne) Save(ctx context.Context) (*ImageProcess, error) {
	return withHooks(ctx, ipuo.sqlSave, ipuo.mutation, ipuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ipuo *ImageProcessUpdateOne) SaveX(ctx context.Context) *ImageProcess {
	node, err := ipuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ipuo *ImageProcessUpdateOne) Exec(ctx context.Context) error {
	_, err := ipuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ipuo *ImageProcessUpdateOne) ExecX(ctx context.Context) {
	if err := ipuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ipuo *ImageProcessUpdateOne) check() error {
	if _, ok := ipuo.mutation.OriginID(); ipuo.mutation.OriginCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ImageProcess.origin"`)
	}
	return nil
}

func (ipuo *ImageProcessUpdateOne) sqlSave(ctx context.Context) (_node *ImageProcess, err error) {
	if err := ipuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(imageprocess.Table, imageprocess.Columns, sqlgraph.NewFieldSpec(imageprocess.FieldID, field.TypeUUID))
	id, ok := ipuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ImageProcess.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ipuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, imageprocess.FieldID)
		for _, f := range fields {
			if !imageprocess.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != imageprocess.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ipuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ipuo.mutation.FinishedAt(); ok {
		_spec.SetField(imageprocess.FieldFinishedAt, field.TypeTime, value)
	}
	if ipuo.mutation.FinishedAtCleared() {
		_spec.ClearField(imageprocess.FieldFinishedAt, field.TypeTime)
	}
	if value, ok := ipuo.mutation.ErroredAt(); ok {
		_spec.SetField(imageprocess.FieldErroredAt, field.TypeTime, value)
	}
	if ipuo.mutation.ErroredAtCleared() {
		_spec.ClearField(imageprocess.FieldErroredAt, field.TypeTime)
	}
	if value, ok := ipuo.mutation.ErrorReason(); ok {
		_spec.SetField(imageprocess.FieldErrorReason, field.TypeString, value)
	}
	if ipuo.mutation.ErrorReasonCleared() {
		_spec.ClearField(imageprocess.FieldErrorReason, field.TypeString)
	}
	if ipuo.mutation.OriginCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   imageprocess.OriginTable,
			Columns: []string{imageprocess.OriginColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(image.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ipuo.mutation.OriginIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   imageprocess.OriginTable,
			Columns: []string{imageprocess.OriginColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(image.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ipuo.mutation.ResultCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   imageprocess.ResultTable,
			Columns: []string{imageprocess.ResultColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(image.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ipuo.mutation.ResultIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   imageprocess.ResultTable,
			Columns: []string{imageprocess.ResultColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(image.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ImageProcess{config: ipuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ipuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{imageprocess.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ipuo.mutation.done = true
	return _node, nil
}
